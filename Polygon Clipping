Write an interactive program for polygon clipping using Sutherland â€“ Hodgeman polygon clipping algorithm.

CODE
#include<GL/glut.h>
#include<GL/gl.h>
#include<stdio.h>
#include <math.h>
#include <stdbool.h> 
struct Point
{
    float x,y;
} w[4],oVer[4];
int Nout;   

void drawPoly(struct Point p[],int n)
{
    glBegin(GL_POLYGON);           
    for(int i=0;i<n;i++)
        glVertex2f(p[i].x,p[i].y);   
    glEnd();
}

bool insideVer(struct Point p)
{   
        if((p.x>=w[0].x)&&(p.x<=w[2].x))       
            if((p.y>=w[0].y)&&(p.y<=w[2].y))
                return true;               
        return false;       
}

void addVer(struct Point p)
{       
    oVer[Nout]=p;       
    Nout=Nout+1;
}

struct Point getInterSect(struct Point s,struct Point p,int edge)
{
    struct Point in;           
    float m;
    if(w[edge].x==w[(edge+1)%4].x)
    { //Vertical Line       
        m=(p.y-s.y)/(p.x-s.x);   
        in.x=w[edge].x;               
        in.y=in.x*m+s.y;
    }
    else
    {//Horizontal Line           
        m=(p.y-s.y)/(p.x-s.x);   
        in.y=w[edge].y;
        in.x=(in.y-s.y)/m;       
    }   
    return in;
}

void clipAndDraw(struct Point inVer[],int Nin)
{
    struct Point s,p,interSec;   
    for(int i=0;i<4;i++)
    {
        Nout=0;
        s=inVer[Nin-1];
        for(int j=0;j<Nin;j++)
        {           
            p=inVer[j];
            if(insideVer(p)==true)
	    {               
                if(insideVer(s)==true)
		{
                    addVer(p);                                   
                }
                else
		{
                    interSec=getInterSect(s,p,i);
                    addVer(interSec);                   
                    addVer(p);                   
                }
            }
            else
	    {       
                if(insideVer(s)==true)
		{
                    interSec=getInterSect(s,p,i);               
                    addVer(interSec);                                                   
                }
            }
            s=p;           
        }       
        inVer=oVer;  
	//oVer=inVer;      
        Nin=Nout;   
    }   
    drawPoly(oVer,4);
}
void display(void)
{   
    int Xmin,Ymin,Xmax,Ymax,i,n,p,q;	
    struct Point inVer[4];
    glClearColor(0.0f,0.0f,0.0f,0.0f);
    glMatrixMode(GL_PROJECTION);       
    glLoadIdentity();   
    glClear(GL_COLOR_BUFFER_BIT);   
    printf("Enter values for Clipping Boundry (value of Xmin, Ymin, Xmax, Ymax) = ");
    scanf("%d%d%d%d",&Xmin,&Ymin,&Xmax,&Ymax);
    w[0].x =Xmin,w[0].y=Ymin;
    w[1].x =Xmin,w[1].y=Ymax;
    w[2].x =Xmax,w[2].y=Ymax;
    w[3].x =Xmax,w[3].y=Ymin;
    //Window for Clipping
    glColor3f(1,1,0);       
    drawPoly(w,4);
    // The Polygon
    glColor3f(0,1,1);
    printf("Enter number of edges in polygon= ");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Enter %d point of polygon (x,y)= ",i+1);
	scanf("%d%d",&p,&q);
	inVer[i].x=p;
	inVer[i].y=q;
    }
    drawPoly(inVer,4);
    // clip and draw
    glColor3f(0,0,1);
    clipAndDraw(inVer,4);       
    glFlush();
}

int main(int argc,char *argv[])
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowSize(600,600);
    glutInitWindowPosition(100,100);
    glutCreateWindow("Polygon Clipping Expt 6");
    gluOrtho2D(-100.0,100.0,-100.0,100.0);
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
